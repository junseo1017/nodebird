next-redux-wrapper 
: next에 redux 붙이기 쉽게 해줌

---
기존의 redux는 아래와 같이 Provider로 감싸줘야 함
next에서 next-redux-wrapper는 알아서 provider로 감싸줌
    <Provider>
      <Head>
      </Head>
      <Component />
    </Provider>

---

redux를 사용하는 이유
페이지의 공통적인 정보(ex. 로그인한 사람의 정보 / 로그인 여부 등)가 있음
여러 컴포넌트에서 공통적으로 사용되는 정보가 있음.
그러면 여러 컴포넌트에 데이터가 흩어지게 되고 그렇지 않게 하려면 부모 컴포넌트를 두어서 자식 컴포넌트로 각각 보내줘야 함.
매번 수동으로 하기엔 번거로움. 중앙에서 하나로 관리해서 컴포넌트로 뿌려주는 역할
리액트의 contextAPI, Redux, MobX, Apollo 등이 있음

---

규모가 커질수록 중앙에서 데이터를 관리하는게 유리함

redux는 원리가 간단해서 에러 핸들링이 쉬움. / 코드량이 많아짐 
MobX 코드량이 줄지만 에러 핸들링(추적)이 어려움
contextAPI 비동기 요청 / 성공 / 실패를 모두 구현해줘야 함. 비동기 지원이 부족함. 

---

redux의 원리
redux은 데이터를 바꾸기 위해선 action을 설정해줘야 함. 
action을 dispatch하고
reducer에서 action에 맞는 실행 코드를 작성해줘야 함.
모든 action를 직접 작성해야하고, action에 맞는 reducer도 만들어줘야 하기 때문에 코드량이 많아짐
 
redux dev tool을 사용하면 action에 대한 모든 기록이 남아있고 action마다 옮겨다닐 수 있어서 테스트하기 편함.

---

redux에서도 불변성을 지켜줘야 함.
cosnt next = {b:'c'}
const prev = {a:nest};
const next = {...prev}

prev.a===next.a // true 얕은 복사로 서로 참조관계를 유지하기 때문에
prev === next // false 모든 객체는 서로 다르기 때문에
{a:'b'} === {a:'b'} // false 위의 연장선

spreadoperator의 장점은 참조관계로 복사를 하면서 유지시킬 건 유지시키고 새로 생성되는 건 생성하면서 메모리를 아껴주기 때문에.

---

rootReducer는 이전상태와 액션을 받아서 다음 상태를 생성함

---
combineReducers : reducer를 합쳐줌

---

hydrate 
: 리덕스 ssr를 위해 넣어야 함